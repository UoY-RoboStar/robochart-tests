package TAggregationSw_assertions

import Tcommunication::*
import TAggregationSw::*
import Taggregation::*

csp Instantiations csp-begin
nametype nat = {0..4}
const_aggregation_Movement_alpha = 1
const_Taggregation_Movement_alpha = 1
TAggregationSw_move_BOUND = 2
nametype string = LSeq(Char,2)
const_Taggregation_Movement_av = 1
const_aggregation_Movement_av = 1
const_Taggregation_Movement_MB = 360/const_Taggregation_Movement_av+1
const_aggregation_Movement_MB = 360/const_aggregation_Movement_av+1
nametype real = { -1,0,1}
nametype int = { -4..4}
const_Tcommunication_Communication_RC = 360/const_aggregation_Movement_av+1
const_communication_Communication_RC = 360/const_Taggregation_Movement_av+1
const_communication_Communication_id = 0
const_Tcommunication_Communication_id = 0
random() = 0
nametype boolean = Bool
nametype ID = {0,1}
floor(x) = x 
const_aggregation_Movement_lv = 1
const_Taggregation_Movement_lv = 1   

Plus(e1,e2,T) = if member(e1+e2,T) then e1+e2 else e1
Div(e1,e2,T) = if member(e1/e2,T) then e1/e2 else e1
Neg(e1,T) = if member(-e1,T) then -e1 else e1
Mult(e1,e2,T) = if member(e1*e2,T) then e1*e2 else e1
Modulus(e1,e2,T) = if member(e1%e2,T) then e1%e2 else e1
Minus(e1,e2,T) = if member(e1-e2,T) then e1-e2 else e1
csp-end


/* Because timed transitions are not deterministic in the timed model the following is
 * expected to be not deterministic in the untimed model, but deterministic in the timed
 * model */
untimed assertion a1: Communication is not deterministic
timed assertion a1_timed: Communication is deterministic
assertion a2: Communication is divergence-free

untimed assertion a3: Communication is deadlock-free
timed assertion a3_timed: Communication is deadlock-free

/* It is deterministic in the timed model as is because an accurate and non-deterministic
 * definition of random() cannot be generated automatically. Because the transitions are
 * otherwhise themselves deterministic the resulting model is deterministic in the timed
 * model */ 
untimed assertion a4: Movement is not deterministic
timed assertion a4_timed: Movement is deterministic
assertion a5: Movement is divergence-free

untimed assertion a6: Movement is deadlock-free
timed assertion a6_timed: Movement is deadlock-free

/* See above for determinism */
untimed assertion a7: AggregationSoftware is not deterministic
timed assertion a7_timed: AggregationSoftware is deterministic
assertion a8: AggregationSoftware is divergence-free

untimed assertion a9: AggregationSoftware is deadlock-free
timed assertion a9_timed: AggregationSoftware is deadlock-free


untimed csp Spec1 csp-begin
Spec1 = let
	Responds = (|~|x:ID @ TAggregationSw::AggregationSoftware::receive.in.(const_Tcommunication_Communication_id,x) -> Responds) |~| SKIP
	Run = TAggregationSw::AggregationSoftware::broadcast.in?x:diff(ID,{const_Tcommunication_Communication_id}) -> TAggregationSw::AggregationSoftware::receive.out!(x,const_Tcommunication_Communication_id) -> Run |~| SKIP
	Main = TAggregationSw::AggregationSoftware::broadcast.out.const_Tcommunication_Communication_id -> (Responds|||Run); Main
within
	Main
csp-end

untimed csp Impl1 csp-begin
Impl1 = TAggregationSw::AggregationSoftware::O__(0)\diff(Events,{|TAggregationSw::AggregationSoftware::receive,TAggregationSw::AggregationSoftware::broadcast|})
csp-end

/* This won't refine because in the untimed model the condition of the timed transitions
 * are ignored and this introduces behaviours that are not allowed by the specification */
untimed assertion b1: Impl1 does not refine Spec1 in the failures model

untimed csp Spec2 csp-begin
Spec2 = let
Moves = TAggregationSw::AggregationSoftware::moveCall?x?y -> TAggregationSw::AggregationSoftware::moveRet!x!y -> (Moves |~| SKIP)
Run = |~|x:Position @ TAggregationSw::AggregationSoftware::obstacle.in.x -> Moves; Run
within
Moves; Run
csp-end 

untimed csp Impl2 csp-begin
Impl2 = TAggregationSw::AggregationSoftware::O__(0)\diff(Events,{|TAggregationSw::AggregationSoftware::moveCall,TAggregationSw::AggregationSoftware::moveRet,TAggregationSw::AggregationSoftware::obstacle|})
csp-end

untimed assertion b2: Impl2 refines Spec2 in the failures model

timed csp TimedSpec1 csp-begin
Timed(OneStep) {
TimedSpec1 = let
	Responds = (|~|x:ID @ EDeadline(TAggregationSw::AggregationSoftware::receive.in.(const_Tcommunication_Communication_id,x),0) ; Responds) |~| SKIP
	Run = TAggregationSw::AggregationSoftware::broadcast.in?x:diff(ID,{const_Tcommunication_Communication_id}) -> EDeadline(TAggregationSw::AggregationSoftware::receive.out.(x,const_Tcommunication_Communication_id),0) ; Run |~| SKIP
	Main = TAggregationSw::AggregationSoftware::broadcast.out.const_Tcommunication_Communication_id -> (Responds|||Run); Main
within
	Main
}
csp-end

timed csp TimedImpl1 csp-begin
Timed(OneStep) {
	TimedImpl1 = timed_priority(TAggregationSw::AggregationSoftware::D__(0)|\{|tock,TAggregationSw::AggregationSoftware::receive,TAggregationSw::AggregationSoftware::broadcast|})
}
csp-end

timed csp TimedSpec2 csp-begin
TimedSpec2 = let
	Moves = |~| x: real @ |~| y: real @ EDeadline(TAggregationSw::AggregationSoftware::moveCall.x.y,0) ; EDeadline(TAggregationSw::AggregationSoftware::moveRet.x.y,0) ; (Moves |~| SKIP)
	Run = |~|x:Position @ TAggregationSw::AggregationSoftware::obstacle.in.x -> Moves; Run
within
	Moves; Run
csp-end

timed csp TimedImpl2 csp-begin
Timed(OneStep) {
	TimedImpl2 = timed_priority(TAggregationSw::AggregationSoftware::D__(0)|\{|TAggregationSw::AggregationSoftware::moveCall,TAggregationSw::AggregationSoftware::moveRet,TAggregationSw::AggregationSoftware::obstacle|})
}
csp-end

timed assertion Timed_B1: TimedImpl1 refines TimedSpec1 in the failures model
timed assertion Timed_B2: TimedImpl2 refines TimedSpec2 in the failures model

/******************************************************************************
 * TA Requirements.
 ******************************************************************************/

assertion Timed_TA1_M: Movement is not timelock-free

/* Not timelock free because of deadlines! */
assertion Timed_TA1_C: Communication is not timelock-free
assertion Timed_TA1_A: AggregationSoftware is not timelock-free

/* Instead can define different processes that hide those events. */
timed csp T_Communication_WithoutDeadlines csp-begin
TA_ExternalEvents_Communication_WithoutDeadlines = {|Tcommunication::Communication::robots|}

T_Communication_WithoutDeadlines = prioritise(Tcommunication::Communication::D__(0,const_Tcommunication_Communication_id,const_Tcommunication_Communication_RC) |\ union(TA_ExternalEvents_Communication_WithoutDeadlines,{tock}),<{},{tock}>)
csp-end

/* The verification for timelock freedom, which is essentially what we are doing here,
 * must be done in the Failures model unless we make assumptions about the behaviour of
 * the environment as below in T_IdealCommunication_WithoutDeadlines. */
timed csp T_IdealCommunication_WithoutDeadlines csp-begin

-- At most a broadcast followed by a receive, or a receive, per time unit.
Communication_OfferBroadcastOrReceive = (Tcommunication::Communication::broadcast?x -> Tcommunication::Communication::receive?x -> SKIP ||| Tcommunication::Communication::receive?x -> SKIP) /\ tock -> Communication_OfferBroadcastOrReceive

TA_IdealCommunication = Tcommunication::Communication::D__(0,const_Tcommunication_Communication_id, const_Tcommunication_Communication_RC) [| {|Tcommunication::Communication::broadcast, Tcommunication::Communication::receive, tock|} |] Communication_OfferBroadcastOrReceive
T_IdealCommunication_WithoutDeadlines = prioritise(TA_IdealCommunication |\ union(TA_ExternalEvents_Communication_WithoutDeadlines,{tock}),<{},{tock}>)

csp-end

timed csp T_A1_C csp-begin
T_A1_C = RUN({tock}) ||| CHAOS(TA_ExternalEvents_Communication_WithoutDeadlines)
csp-end

timed assertion Timed_TA1_C_NoDeadlines: T_Communication_WithoutDeadlines refines T_A1_C in the failures model
timed assertion Timed_TA1_C_Ideal_NoDeadlines: T_IdealCommunication_WithoutDeadlines refines T_A1_C

timed csp T_AggregationSoftware_WithoutDeadlines csp-begin
TA_ExternalEvents_AggregationSoftware_WithoutDeadlines = {|TAggregationSw::AggregationSoftware::obstacle|}

T_AggregationSoftware_WithoutDeadlines = prioritise(TAggregationSw::AggregationSoftware::D__(0) |\ union(TA_ExternalEvents_AggregationSoftware_WithoutDeadlines,{tock}),<{},{tock}>)
csp-end

timed csp T_IdealAggregationSoftware_WithoutDeadlines csp-begin

-- At most a broadcast followed by a receive, or a receive, per time unit.
OfferBroadcastOrReceive = (TAggregationSw::AggregationSoftware::broadcast?x -> TAggregationSw::AggregationSoftware::receive?x -> SKIP ||| TAggregationSw::AggregationSoftware::receive?x -> SKIP) /\ tock -> OfferBroadcastOrReceive

TA_IdealSoftware = TAggregationSw::AggregationSoftware::D__(0) [| {|tock, TAggregationSw::AggregationSoftware::broadcast, TAggregationSw::AggregationSoftware::receive|} |] OfferBroadcastOrReceive

T_IdealAggregationSoftware_WithoutDeadlines = prioritise(TA_IdealSoftware |\ union(TA_ExternalEvents_AggregationSoftware_WithoutDeadlines,{tock}),<{},{tock}>)
csp-end

timed csp T_A1_A csp-begin
T_A1_A = RUN({tock}) ||| CHAOS(TA_ExternalEvents_AggregationSoftware_WithoutDeadlines)
csp-end

timed assertion Timed_TA1_A_NoDeadlines: T_AggregationSoftware_WithoutDeadlines refines T_A1_A in the failures model
timed assertion Timed_TA1_A_Ideal_NoDeadlines: T_IdealAggregationSoftware_WithoutDeadlines refines T_A1_A

/** REACHABILITY **/

/* Note: the following fails for alpha = 2 because ID is set {0,1} so it is impossible for more than two neighbours to
 * 		 accumulate, and when alpha = 2 it is impossible for that transition to be taken :-) */
assertion TA_2_Turning_Turn180: Movement::Turning::Turn180 is reachable in AggregationSoftware
assertion TA_2_Turning_RandomTurn: Movement::Turning::RandomTurn is reachable in AggregationSoftware
assertion TA_2_Turning_f1: Movement::Turning::f1 is reachable in AggregationSoftware
assertion TA_2_Turning: Movement::Turning is reachable in AggregationSoftware
assertion TA_2_MovementAndAvoidance: Movement::MovementAndAvoidance is reachable in AggregationSoftware
assertion TA_2_MovementAndAvoidance_Move: Movement::MovementAndAvoidance::Move is reachable in AggregationSoftware
assertion TA_2_MovementAndAvoidance_Avoid: Movement::MovementAndAvoidance::Avoid is reachable in AggregationSoftware
assertion TA_2_Communication_Broadcast: Communication::Broadcast is reachable in AggregationSoftware 
assertion TA_2_Communication_Receive: Communication::Receive is reachable in AggregationSoftware 

/******************************************************************************
 * TB Requirements.
 ******************************************************************************/

timed csp AuxiliaryDefinitions csp-begin

-- Auxiliary definitions
-- This should allow any other events (including tock) up to 'd' time units to elapse, and
-- when an event in {e} happens it does SKIP.
ADeadline(e,d) = if card(e) == 0 then
					((CHAOS(diff(Events,{finished})) [| {tock} |] (Countdown(d) ; finished -> SKIP)) [|{finished}|> SKIP)\{finished}
				 else
				 	(CHAOS(Events) [| {tock} |] Countdown(d)) [|e|> SKIP

-- Offers any event non-deterministically, and if 'e' is chosen, then it terminates.
AnyOther(e) = CHAOS(Events) [|e|> SKIP

Timed(OneStep) {
CommunicationStateSpent(t,x) = 
		let
			Main = AnyOther({|Tcommunication::Communication::enterV.x|}) ; ADeadline({|Tcommunication::Communication::exitV.x|},t) ; Main
		within
			timed_priority(Main)
			
}

Timed(OneStep) {
EnterExactly(t) = 
	let
		Initial = ADeadline({|Tcommunication::Communication::enterV.Tcommunication::Communication::SID_Communication_Receive|},0)
		EveryT = ADeadline({|Tcommunication::Communication::enterV.Tcommunication::Communication::SID_Communication_Receive|},t) ; EveryT
	within
		timed_priority(Initial ; EveryT)
}

csp-end

timed csp T_AggregationSoftware_Communication_VS csp-begin
T_AggregationSoftware_Communication_VS = Tcommunication::Communication::ShowV(TAggregationSw::AggregationSoftware::VS__(0))
csp-end

timed csp TB1 csp-begin
TB1 = CommunicationStateSpent(const_Tcommunication_Communication_RC,Tcommunication::Communication::SID_Communication_Receive)
csp-end

timed csp TB2 csp-begin
TB2 = EnterExactly(const_Tcommunication_Communication_RC)
csp-end

timed csp TB3 csp-begin
TB3 = CommunicationStateSpent(0,Tcommunication::Communication::SID_Communication_Broadcast)
csp-end

timed csp TB4 csp-begin
NoEvent = AnyOther({|TAggregationSw::AggregationSoftware::broadcast.in.const_Tcommunication_Communication_id|}) ; BroadcastHappened(0)

BroadcastHappened(t) = (t < const_Tcommunication_Communication_RC & (TAggregationSw::AggregationSoftware::broadcast.in?x-> SomeHappened(t) 
											   [] 
											   TAggregationSw::AggregationSoftware::receive.in?x:{x|x <- {(const_Tcommunication_Communication_id,x0) | x0 <- ID}} -> SomeHappened(t) 
											   [] 
											   tock -> BroadcastHappened(t+1)))
						[]
						t == const_Tcommunication_Communication_RC & NoEvent

SomeHappened(t) = t < const_Tcommunication_Communication_RC & (AnyOther({tock}) ; SomeHappened(t+1))
				  []
				  t == const_Tcommunication_Communication_RC & NoEvent

TB4 = CHAOS({|TAggregationSw::AggregationSoftware::moveCall,TAggregationSw::AggregationSoftware::moveRet,TAggregationSw::AggregationSoftware::obstacle,tock|}) [| {tock} |] NoEvent
csp-end

timed csp TB5 csp-begin
Timed(OneStep) {
-- Requirement TB.5
EveryMBEnterTurning =
	let
		Main = ADeadline({|Taggregation::Movement::enterV.Taggregation::Movement::SID_Movement_Turning|},const_Taggregation_Movement_MB) ; Main
	within
		timed_priority(Main)
}

TB5 = EveryMBEnterTurning
csp-end

timed csp T_AggregationSoftware_Movement_VS csp-begin
T_AggregationSoftware_Movement_VS = Taggregation::Movement::ShowV(TAggregationSw::AggregationSoftware::VS__(0))
csp-end

timed csp TB6 csp-begin
Timed(OneStep) {
MovementStateSpent(t,x) =
	let
		Main = AnyOther({|Taggregation::Movement::enterV.x|}) ; ADeadline({|Taggregation::Movement::exitV.x|},t) ; Main
	within
		timed_priority(Main)
}
TB6 = MovementStateSpent(const_Taggregation_Movement_MB,Taggregation::Movement::SID_Movement_MovementAndAvoidance)
csp-end

timed csp TB7 csp-begin
TB7 = MovementStateSpent(360/const_Taggregation_Movement_av,Taggregation::Movement::SID_Movement_MovementAndAvoidance_Avoid)
csp-end

timed csp TB8 csp-begin
TB8 = MovementStateSpent(360/const_Taggregation_Movement_av,Taggregation::Movement::SID_Movement_Turning)
csp-end

timed assertion Timed_TB1: T_AggregationSoftware_Communication_VS refines TB1 in the failures divergences model
timed assertion Timed_TB2: T_AggregationSoftware_Communication_VS refines TB2 in the failures divergences model
timed assertion Timed_TB3: T_AggregationSoftware_Communication_VS refines TB3
timed assertion Timed_TB4: AggregationSoftware refines TB4 in the failures divergences model
timed assertion Timed_TB5: T_AggregationSoftware_Movement_VS refines TB5 in the failures divergences model
timed assertion Timed_TB6: T_AggregationSoftware_Movement_VS refines TB6 in the failures divergences model
timed assertion Timed_TB7: T_AggregationSoftware_Movement_VS refines TB7 in the failures divergences model
timed assertion Timed_TB8: T_AggregationSoftware_Movement_VS refines TB8 in the failures divergences model


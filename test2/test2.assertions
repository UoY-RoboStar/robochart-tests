csp test2_spec1 csp-begin
	test2_spec1 = test2::S::opCall.1 -> test2::S::terminate -> SKIP
csp-end

assertion t2a: test2::S equals test2_spec1

csp test2_spec2 csp-begin
	test2_spec2 = test2::C1::opCall.1 -> test2::C1::terminate -> SKIP
csp-end

assertion t2b: test2::C1 equals test2_spec2

untimed csp test2_spec3 csp-begin
	test2_spec3 = test2::C2::e.out.1 -> test2::C2::terminate -> SKIP
csp-end

untimed assertion t2c: test2::C2 equals test2_spec3

timed csp test2_spec4 csp-begin
	test2_spec4 = let
		aux = test2::C2::e.out.1 -> test2::C2::terminate -> SKIP
		      []
		      tock -> aux
	within aux
csp-end

timed assertion t2d: test2::C2 equals test2_spec4


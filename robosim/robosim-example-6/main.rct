package M
diagram main

interface IEvent {
	event In:nat
	event Out1:nat
	event Out2:nat
}

interface IConsts {
	const Co:nat
}

// A state machine with no inputs or outputs

interface IVars {
	var x:nat	
}
interface IVars2 {
	var y:nat
}

interface IOps {
	move()
}

interface ITest {
	test()
} 
operation test() { 
	requires IConsts
	requires IVars
	requires IVars2
	event Out3:nat 
	event In:nat
	var d:nat
	clock C
	initial I
	final F
	state S0 {}
	state S1 {}
	transition T0 { from I to S0 }
	transition T1 { from S0 to F trigger In?d condition d==1/\since(C) > 0 action Out3!Co }
	transition T2 { from S0 to S0 condition d == 3 /\ x > 0 }
	transition T3 { from S0 to S0 condition x < 1}
}

stm STM {
		 
	uses IEvent
	requires IVars
	uses IVars2
	requires IOps
	uses IConsts
	event Out3:nat 
	requires ITest
	clock C
	var a:nat
	var b:nat
	var c:nat
	var d:nat
	var e:nat
	var f:nat
	var g:nat
	var h:nat
	var i:nat
	/*var j:nat
	var k:nat
	var l:nat
	var m:nat
	var n:nat
	var o:nat
	var p:nat
	var q:nat
	var r:nat
	var s:nat
	var t:nat
	var u:nat
	var v:nat
	var w:nat
	var z:nat	*/
	
	var once:boolean
	initial I
	state S0 {}
	state S1 {}
	state S2 {}
	transition T0 { from I to S0 action once = true;#C }
	transition T1 { from S0 to S1 
					condition since(C) > 0
					action Out1!d;Out2!d;Out2!d;move();move();test() }
					
	//transition T4 { from S0 to S0 condition d > 0 action test()}
	
	transition T20 { from S1 to S2 action Out1!i }
	
	
	junction J0
	junction J1
	junction J2
	junction J3
	
 	transition T5 { from S0 to J0 condition since(C)>1 action c = a + b }
 	transition T6 { from J0 to J1 condition c == a + b action e = c + d }
	transition T7 { from J1 to J2 condition e == c + d action g = e + f }
	transition T8 { from J2 to J3 condition g == e + f action i = g + h }
	transition T9 { from J3 to S2 condition i == g + h }
	
	
}

controller CT {
	
	uses IEvent
	requires IVars
	requires IOps
	sref stm0=STM
	sref stm1=STM
	opref op=test
	
	connection CT on In to stm0 on In
	connection stm0 on Out1 to CT on Out1
	connection stm0 on Out2 to CT on Out2
	
}

module Mod {
	
	cref ctrl0=CT
	
	robotic platform RP {
		uses IEvent
		provides IVars
		provides IOps
		//provides IConsts
	}
	
	connection RP on In to ctrl0 on In ( _async )
	connection ctrl0 on Out1 to RP on Out1 ( _async )
	connection ctrl0 on Out2 to RP on Out2 ( _async )
}
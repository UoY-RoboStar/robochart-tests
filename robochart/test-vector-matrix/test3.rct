package test3

function f(m:matrix(int,2,2)): int {
	
}

import sequence_toolkit::* 

stm S3 {
	const RotM90 : matrix ( int , 2 , 2 ) = [|0, -1; 1, 0|]
	const TransV: vector (int, 2) = [|1,1|]
	var aux : vector ( int , 2 )
	var aux1 : matrix ( int , 2 , 2 )
	var foo: int
	var bar: vector ( int , 2 )
	event input : vector ( int , 2 )
	event output : vector ( int , 2 )
	event outputN: int
	event test: Seq(int)
	var tmp: Seq(int) = <0>
	var tmpN: int
	initial i0
	state s0 {
		
	} 
	state s1 {
		entry aux = aux + TransV; output!aux; outputN!foo
	} 
	final f0
	transition t0 {
		from i0
		to s0
	}
	transition t1 {
		from s1 
		to f0  
	}
	transition t2 {
		from s0 to s1
		trigger input?aux
		action aux = RotM90*aux; aux = -aux; aux = aux+aux; foo = f(RotM90) + aux*aux
	}
} 
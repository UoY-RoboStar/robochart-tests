
// This example demonstrates that the follow processes (equal under failures):
//
// in1 -> ((in2 -> in4 -> STOP) [] in4 -> STOP) 
// []
// in1 -> in2 -> in3 -> STOP
//
// =
// in1 -> ((in2 -> in3 -> STOP) [] in4 -> STOP)
// []
// in1 -> in2 -> in4 -> STOP
//
// are not equal in tick-tock (in both directions of the refinement!), 
// because of the ability to observe refusals across time.

// The following is defined manually for the moment as there is no automatic renaming
// of the events when considering an assertion between two RoboChart components.
timed csp SpecStm0 associated to stm0 csp-begin

SpecStm0 = stm0::O__(0)
			[[ stm0::in1 <- stm1::in1, 
			   stm0::in2 <- stm1::in2,
			   stm0::in3 <- stm1::in3,
			   stm0::in4 <- stm1::in4, 
			   stm0::terminate <- stm1::terminate
			]]
SpecStm0__sem__events = stm1::sem__events

csp-end
 
timed assertion A0 : SpecStm0 refines stm1 in the failures divergences model
timed assertion A1 : stm1 refines SpecStm0 in the failures divergences model 
 
timed assertion TT0 : SpecStm0 does not refine stm1 in the tick-tock model
timed assertion TT1 : stm1 does not refine SpecStm0 in the tick-tock model
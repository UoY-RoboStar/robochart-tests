package aggregation_assertions

import communication::*
import AggregationSw::*

csp Instantiations csp-begin
nametype core_nat = {0..4}
 
AggregationSw_move_BOUND = 2
nametype core_string = LSeq(Char,2)
nametype core_real = { -1,0,1}
nametype core_int = { -4..4}

Mathematics_random() = 0
nametype core_boolean = Bool
Mathematics_floor(x) = x 

nametype AggregationSw_ID = {0,1}

const_communication_Communication_RC = 1
const_communication_Communication_id = 0 

const_communicationC_CommunicationC_stm_ref0_RC = 1
const_communicationC_CommunicationC_stm_ref0_id = 0

const_aggregation_Movement_lv = 1   
const_aggregation_Movement_av = 1
const_aggregation_Movement_MB = 1
const_aggregation_Movement_alpha = 2

const_movementC_MovementC_stm_ref0_lv = 1
const_movementC_MovementC_stm_ref0_av = 1
const_movementC_MovementC_stm_ref0_MB = 1
const_movementC_MovementC_stm_ref0_alpha = 2

Plus(e1,e2,T) = if member(e1+e2,T) then e1+e2 else e1
Div(e1,e2,T) = if member(e1/e2,T) then e1/e2 else e1
Neg(e1,T) = if member(-e1,T) then -e1 else e1
Mult(e1,e2,T) = if member(e1*e2,T) then e1*e2 else e1
Modulus(e1,e2,T) = if member(e1%e2,T) then e1%e2 else e1
Minus(e1,e2,T) = if member(e1-e2,T) then e1-e2 else e1
csp-end

import aggregation::*

assertion a1: Communication is not deterministic.
assertion a2: Communication is divergence-free.
assertion a3: Communication is deadlock-free.

assertion a4: Movement is not deterministic.
assertion a5: Movement is divergence-free.
assertion a6: Movement is deadlock-free.

assertion a7: AggregationSoftware is not deterministic.
assertion a8: AggregationSoftware is divergence-free.
assertion a9: AggregationSoftware is deadlock-free.


untimed csp Spec1 csp-begin
Spec1 = let
Responds = (|~|x:AggregationSw_ID @ AggregationSw::AggregationSoftware::receive.in.(const_communication_Communication_id,x) -> Responds) |~| SKIP
Run = AggregationSw::AggregationSoftware::broadcast.in?x:diff(AggregationSw_ID,{const_communication_Communication_id}) -> AggregationSw::AggregationSoftware::receive.out!(x,const_communication_Communication_id) -> Run |~| SKIP
Main = AggregationSw::AggregationSoftware::broadcast.out.const_communication_Communication_id -> (Responds|||Run); Main
within
Main
csp-end

untimed csp Impl1 csp-begin
Impl1 = let 
	id__ = 0
	const_aggregation_Movement_lv = 1	
	const_aggregation_Movement_av = 1
	const_aggregation_Movement_MB = 1
	const_aggregation_Movement_alpha = 2
	const_communication_Communication_id = 0
	const_communication_Communication_RC = 1
within
	AggregationSw::AggregationSoftware::O__(id__,
			    const_aggregation_Movement_lv,
			    const_aggregation_Movement_av,
			    const_aggregation_Movement_MB,
			    const_aggregation_Movement_alpha,
			    const_communication_Communication_id,
			    const_communication_Communication_RC)
	\diff(Events,{|AggregationSw::AggregationSoftware::receive,AggregationSw::AggregationSoftware::broadcast|}) 
csp-end

untimed assertion b1: Impl1 refines Spec1 in the failures model.

untimed csp Spec2 csp-begin
Spec2 = let
Moves = AggregationSw::AggregationSoftware::moveCall?x?y -> (Moves |~| SKIP)
Run = |~|x:AggregationSw_Position @ AggregationSw::AggregationSoftware::obstacle.in.x -> Moves; Run
within
Moves; Run
csp-end 

untimed csp Impl2 csp-begin
Impl2 = let 
	id__ = 0
	const_aggregation_Movement_lv = 0
	const_aggregation_Movement_av = 0
	const_aggregation_Movement_MB = 0
	const_aggregation_Movement_alpha = 0
	const_communication_Communication_id = 0
	const_communication_Communication_RC = 0
within
	AggregationSw::AggregationSoftware::O__(id__,
			    const_aggregation_Movement_lv,
			    const_aggregation_Movement_av,
			    const_aggregation_Movement_MB,
			    const_aggregation_Movement_alpha,
			    const_communication_Communication_id,
			    const_communication_Communication_RC)
	\diff(Events,{|AggregationSw::AggregationSoftware::moveCall,AggregationSw::AggregationSoftware::obstacle|})
csp-end

untimed assertion b2: Impl2 refines Spec2 in the failures model.

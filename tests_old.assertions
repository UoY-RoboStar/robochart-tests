import test1::*

untimed csp untimed_test1_spec csp-begin
channel int__
untimed_test1_spec = let
aux = test1_S_a.in?x -> test1_S_b.out!Plus(x,1,nat) -> aux
      []
      int__ ->  test1_S_c.out -> test1_S_terminate -> SKIP
within aux\{|int__|}
csp-end

timed csp timed_test1_spec csp-begin
channel int__
timed_test1_spec = let
aux(n) = 
	(n < 4) & (
		test1_S_a.in?x -> (
			let 
				rec(n) = test1_S_b.out!Plus(x,1,nat) -> aux(n)
				         []
				         tock -> if (n > 10) then rec(n) else rec(n+1)
			within
				rec(n)
	  	)
	  	[]
	  	tock -> if (n > 10) then aux(n) else aux(n+1)
	) 
    []
    (n >= 4) & int__ -> let
      	rec = test1_S_c.out -> test1_S_terminate -> SKIP
      	      []
      	      tock -> rec
      within rec
within aux(0)\{|int__|}
csp-end


untimed assertion t1: S equals untimed_test1_spec
timed assertion t2: S equals timed_test1_spec